# coding: utf8
# Select or Add Option widget and Multiselect widget (al final)
from gluon.sqlhtml import *
from gluon.utils import web2py_uuid
from gluon import current

 
class SELECT_OR_ADD_OPTION(object):  #and even EDIT
 
    def __init__(self, referenced_table, controller="default", function="referenced_data", dialog_width=450):
        self.referenced_table = referenced_table
        self.controller = controller
        self.function = function
        self.dialog_width = dialog_width
 
    def widget(self, field, value):
        #generate the standard widget for this field
        select_widget = OptionsWidget.widget(field, value)
        #get the widget's id (need to know later on so can tell receiving controller what to update)
        my_select_id = web2py_uuid()
        select_widget['_id']= my_select_id
        #my_select_id = select_widget.attributes.get('_id', None) 
        
        wrapper = DIV(_id=my_select_id+"__reference-actions__wrapper") 
        wrapper.components.extend([select_widget, ])
        #custom INVERCA para poner el estilo en una línea y acorde a los demás controles
        sel=wrapper.element('select',_id=my_select_id)
        sel['_class']+=' form-control'
        sel['_style']='width:auto; display:inline;'
        #wrapper.element('select',_id=my_select_id)
        style_icons = {'new':"icon plus icon-plus glyphicon glyphicon-plus", 'edit': "icon pen icon-pencil glyphicon glyphicon-pencil" }
        actions = ['new']
        if value: actions.append('edit')  # if we already have selected value
        for action in actions:
            extra_args = [my_select_id, action, self.referenced_table]
            if action == 'edit':
                extra_args.append(value)
            #create a div that will load the specified controller via ajax
            idcomp=my_select_id+'_'+action + '_dlgform'
            form_loader_div = DIV(_id=idcomp, _title=T(action)+": "+self.referenced_table.capitalize())
            url=URL(c=self.controller,f=self.function,args=extra_args,user_signature=True)
            #generate the "add/edit" button that will appear next the options widget and open our dialog
            action_button = A([SPAN(_class=style_icons[action]), SPAN( _class="buttontext button") ], 
                              _title=T(action), _id=my_select_id+"_option_%s_trigger"%action, _class="button btn", _style="vertical-align:top" )
    
            #create javascript for creating and opening the dialog
            js = '$( "#%s" ).dialog({autoOpen: false, not__modal:true, show: "fade", hide: "fade", width: %s});' % (idcomp, self.dialog_width)
            js += '$( "#%(id)s_option_%(action)s_trigger" ).click(function() {   $( "#%(idcomp)s" ).dialog( "open"); web2py_component("%(url)s","%(idcomp)s"); return false;}); ' % dict(id=my_select_id, action=action, idcomp=idcomp,url=url )
            if action=='edit':
                # hide if reference changed - as load is constructed for initial value only (or would need some lazy loading mechanizm)
                js += '$(function() {$("#%s").change(function() {    $( "#%s_option_%s_trigger" ).hide(); } ) });' % (my_select_id,  my_select_id, 'edit', )
            jq_script=SCRIPT(js, _type="text/javascript")
#añado primero action_button antes que form_loader_div para que no me haga salto de linea en dialogos anidados
            wrapper.components.extend([action_button,form_loader_div, jq_script])
        return wrapper


class AutocompleteWidgetSelectOrAddOption(object):
    _class = 'string form-control'

    def __init__(self, request, field, id_field=None, db=None,
                 orderby=None, limitby=(0,10),
                 keyword='_autocomplete_%(fieldname)s',
                 min_length=2,
                 # -------------------------------------------------------------
                 # SelectOrAddOption
                 controller=None, function=None, form_title=None,
                 button_text = None, dialog_width=1000, multi=False,sep=[' ',' ']
                 # -------------------------------------------------------------
                 ):
        self.request = request
        from globals import Response, Storage
        self._response = Response()
        self._response._view_environment = current.globalenv.copy()
        self._response._view_environment.update(
            request=Storage(folder=os.path.join(os.path.dirname(os.path.dirname(self.request.folder)))),
            response=self._response,
        )
        self.keyword = keyword % dict(fieldname=field.name)
        self.db = db or field._db
        self.orderby = orderby
        self.limitby = limitby
        self.min_length = min_length
        self.fields=[field]
        self._multi=multi
        self._sep=sep
        if id_field:
            self.is_reference = True
            self.fields.append(id_field)
        else:
            self.is_reference = False
        self.function = function
        if hasattr(request,'application'):
            self.url = URL(args=request.args)
            self.callback()
        else:
            self.url = request
        # ----------------------------------------------------------------------
        # SelectOrAddOption
        if form_title == None:
            self.form_title = T('Add New')
        else:
            self.form_title = T(form_title)
        if button_text == None:
            self.button_text = T('Add')
        else:
            self.button_text = T(button_text)
        self.dialog_width = dialog_width

        self.controller = controller

        # ----------------------------------------------------------------------
    def callback(self):
        if self.keyword in self.request.vars:
            field = self.fields[0]
            rows = self.db(field.like(self.request.vars[self.keyword]+'%'))\
                .select(orderby=self.orderby,
                        limitby=self.limitby,*self.fields)
            #Tuve que poner el  decode-encode para que no muestre caracteres no ingleses como interrogantes en un rombo
            if self.function:
                if self.is_reference:
                    Add=[OPTION('--%s "%s"'%(T('Add'),self.request.vars[self.keyword].decode('latin-1').encode('utf8')),_value=-1,_id='selectadd')]
                else:
                    Add=[OPTION('--%s "%s"'%(T('Add'),self.request.vars[self.keyword].decode('latin-1').encode('utf8')), _id='selectadd')]
            else:
                Add=[]
            if rows:
                if self.is_reference:
                    id_field = self.fields[1]
                    opciones=[OPTION(s[field.name],_value=s[id_field.name],_selected=(k==0))  for k,s in enumerate(rows)]
                else:
                    opciones=[OPTION(s[field.name],_selected=(k==0)) \
                                          for k,s in enumerate(rows)]
                opciones+=Add
                raise HTTP(200,SELECT(_id=self.keyword,_class='autocomplete',
                                          _size=len(rows)+len(Add),_multiple=(len(rows)==1),
                                          *opciones).xml())
            else:
                
                raise HTTP(200,SELECT(_id=self.keyword,_class='autocomplete',
                                          _size=len(Add),_multiple=True,
                                          *Add).xml())
    def __call__(self,field,value,**attributes):
        # ----------------------------------------------------------------------
        # SelectOrAddOption
        my_select_id = '%s_%s' % (field._tablename, field.name)
        add_args = [my_select_id,'new',self.fields[0]._tablename] #esto sería si una funcion del controlador maneja esto
        #create a div that will load the specified controller via ajax
        idcomp=my_select_id+"_dialog-form"
        #form_loader_div = DIV(LOAD(c=self.controller, f=self.function, args=add_args,ajax=True,_target=idcomp), _id=idcomp, _title=self.form_title)
        form_loader_div = DIV(_id=idcomp, _title=self.form_title)
        url=URL(c=self.controller,f=self.function,args=add_args,user_signature=True)
        #generate the "add" button that will appear next the options widget and open our dialog
        activator_button = A(T(self.button_text), _id=my_select_id+"_option_add_trigger")
        #create javascript for creating and opening the dialog
        js = '$( "#%s_dialog-form" ).dialog({autoOpen: false, show: "fade", hide: "fade", width: %s});' % (my_select_id, self.dialog_width)
        js += '$( "#%s_option_add_trigger" ).click(function() { $( "#%s_dialog-form" ).dialog( "open" );web2py_component("%s","%s"); return false;}); ' % (my_select_id, my_select_id,url,idcomp)
        #decorate our activator button for good measure
        js += '$(function() { $( "#%s_option_add_trigger" ).button({text: true, icons: { primary: "ui-icon-circle-plus"} }); });' % (my_select_id)
        js += '$(function() { $( "#%s_option_add_trigger" ).css("margin-left", "+=5"); });' % (my_select_id)
        jq_script=SCRIPT(js, _type="text/javascript")

        wrapper = DIV(_id=my_select_id+"_adder_wrapper")
        # ----------------------------------------------------------------------
        default = dict(
            _type = 'text',
            value = (not value is None and str(value)) or '',
            )
        attr = StringWidget._attributes(field, default, **attributes)
        div_id = self.keyword+'_div'
        attr['_autocomplete']='off'
        url=URL(c=self.controller,f=self.function,args=add_args,user_signature=True)
        if self.is_reference:
            key2 = self.keyword+'_aux'
            key3 = self.keyword+'_auto'
            add_args = [key3,'new',self.fields[0]._tablename] #esto sería si una funcion del controlador maneja esto
            attr['_class']='string form-control'
            name = attr['_name']
            if 'requires' in attr: del attr['requires']
            attr['_name'] = key2
            value = attr['value']
            record = self.db(self.fields[1]==value).select(self.fields[0]).first()
            attr['value'] = record and record[self.fields[0].name]
            attr['_onblur']="jQuery('#%(div_id)s').delay(500).fadeOut();" % \
                dict(div_id=div_id,u='F'+self.keyword)
            dic=dict(url=self.url,
                         min_length=self.min_length,
                         key=self.keyword,
                         id=attr['_id'],key2=key2,key3=key3,
                         name=name,
                         div_id=div_id,
                         u='F'+self.keyword,
                         idcomp=idcomp,
                         urlcomp=url,
                         field=self.fields[0].name)
            jq_script+=XML(self._response.render('plugin_selectplus/selectplus_js.html',dic))
            if self.min_length==0:
                attr['_onfocus'] = attr['_onkeyup']
            wrapper.components.extend([TAG[''](INPUT(**attr),
                                      INPUT(_type='hidden',
                                      _id=key3,
                                      _value=value,
                                      _name=name,
                                      requires=field.requires),
                                      DIV(_id=div_id,
                                      _style='padding: 12 0 0 0px;position:absolute;'),
                                      form_loader_div,
                                      jq_script,)])
            return wrapper
        else:
            attr['_name']=field.name
            attr['_onblur']="jQuery('#%(div_id)s').delay(500).fadeOut();" % \
                dict(div_id=div_id,u='F'+self.keyword)
            attr['_class']='string form-control'
            dic=dict(url=self.url,min_length=self.min_length,
                     key=self.keyword,id=attr['_id'], div_id=div_id,
                     u='F'+self.keyword,idcomp=idcomp,urlcomp=url,
                     field=self.fields[0].name,multi=self._multi,sep=self._sep)
            jq_script+=XML(self._response.render('plugin_selectplus/selectplus2_js.html',dic))
            if self.min_length==0:
                attr['_onfocus'] = attr['_onkeyup']
            wrapper.components.extend([TAG[''](INPUT(**attr),
                                      DIV(_id=div_id,
                                      _style='padding: 12 0 0 0px;position:absolute;')),
                                      form_loader_div,
                                      jq_script])
            return wrapper


"""
# Multiselect widget from http://www.web2pyslices.com/slice/show/1395/jquery-multi-select-widget
#Definir un campo de esta manera:
 db.tabla.campo.requires = IS_IN_SET(['Apples','Oranges','Bananas','Kiwis','Lemons'],multiple=True)
#y asignarle el widgget 
 db.tabla.campo.widget = multiselect_widget
"""
def multiselect_widget(f,v):
    import uuid
    from gluon import current
    #multi select normal con 1 select donde se sombrea cada item.
    current.response.files.append(URL(r=request,c='static/ui/multiselect',f='jquery.multi-select.css'))
    current.response.files.append(URL(r=request,c='static/ui/multiselect',f='jquery.multi-select.js'))
    #multi select con 2 ventana de seleccionados y no seleccionados
    #current.response.files.append(URL(r=request,c='static/ui/multi-select',f='jquery.multi-select.css'))
    #current.response.files.append(URL(r=request,c='static/ui/multi-select',f='jquery.multi-select.js'))
    d_id = "multiselect-" + str(uuid.uuid4())[:8]
    wrapper = DIV(_id=d_id)
    inp = SQLFORM.widgets.options.widget(f,v)
    inp['_multiple'] = 'multiple'
    inp['_style'] = 'min-width: %spx;' % (len(f.name) * 20 + 50)
    if v:
        if not isinstance(v,list): v = str(v).split('|')
        opts = inp.elements('option')
        for op in opts:
            if op['_value'] in v:
                op['_selected'] = 'selected'            
    scr = SCRIPT('jQuery("#%s select").multiSelect({'\
                 'noneSelected:"Select %ss"});' % (d_id,f.name))
    wrapper.append(inp)
    wrapper.append(scr)
    if request.vars.get(inp['_id']+'[]',None):
        var = request.vars[inp['_id']+'[]']
        if not isinstance(var,list): var = [var]
        request.vars[f.name] = var
        del request.vars[inp['_id']+'[]']
    return wrapper

"""
# MultiTab UI constructor
 necesita cargar jquery UI
 tabs=matriz de ['DenTab',{loadURL}],
 {laodURL}={'c': controller, 'f': function, user_signature=False,vars=vars), que se le pasan por el **tabs[x][1]
"""

def multiTab_widget(tabs):
    tab_id =  web2py_uuid()
    wp=DIV(_id=tab_id)
    sc ='$(function(){ $("#%s").tabs();  $(".selector").tabs({selected: 1});'% tab_id
    sc+='$("#%s").tabs({activate: function( event, ui ) {switch (ui.newPanel.attr("id")){' % tab_id
    for x in range(0,len(tabs)):
        id='%s-%s'%(x,tab_id)
        url=URL(**tabs[x][1])
        sc+='case "%s": web2py_component("%s","%s"); break;' %(id,url,id)
    sc+='}}});});'
    wp.components.extend([SCRIPT(sc, _type="text/javascript")])

    wp.components.extend([UL(*[LI(A(tabs[x][0],_href='#%s-%s' % (x,tab_id))) for x in range(0,len(tabs))])])
    for x in range(0,len(tabs)):
        ld=LOAD(ajax=True,target='%s-%s'%(x,tab_id),**tabs[x][1])
        wp.components.extend([DIV(ld,_id='%s-%s'%(x,tab_id))])
    return wp

def autoSugest_widget():
    from gluon import current
    response=current.response
    response.files.append(URL(r=request,c='static/textboxlist',f='textboxlist.css'))
    response.files.append(URL(r=request,c='static/textboxlist',f='textboxlist_autocomplete.css'))
    response.files.append(URL(r=request,c='static/textboxlist',f='growinginput.js'))
    response.files.append(URL(r=request,c='static/textboxlist',f='textboxlist.js'))
    response.files.append(URL(r=request,c='static/textboxlist',f='textboxlist_autocomplete.js'))
    response.files.append(URL(r=request,c='static/textboxlist',f='textboxlist_bin.js'))
